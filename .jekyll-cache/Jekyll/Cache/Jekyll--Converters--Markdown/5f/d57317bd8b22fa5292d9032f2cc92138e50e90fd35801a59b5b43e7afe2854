I""<h1 id="segregation-analysis">Segregation Analysis</h1>

<!-- ![Segregation](/wf/Fig05_Variant_Segregation.jpg "Fig05_Variant_Segregation") -->

<h2 id="contents">Contents</h2>
<ul>
  <li>[Segregation Analysis]</li>
  <li>[Hail]</li>
  <li>[Steps of running]</li>
</ul>

<h2 id="segregation-analysis-1">Segregation Analysis</h2>
<p>This is a process to explore the distribution of genetic variants among families with &lt;=2 phenotypes or disease states. This analysis breaks down counts of samples by genotype states (heterozygous reference, heterozygous, homozygous variant, no call), by disease status (affected vs nonaffected) and by family scope (in-family or global). <strong>Each output line represents one variant in one family</strong>. Additionally, since segregation analysis outputs are tab-separated, this program can be used to convert vcf to tabular format, including any user-defined annotations present in the input vcf file.</p>

<p>This program requires two inputs: 
1) a pedigree file with six tab-separated columns in the order:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">familyid</code></li>
  <li><code class="language-plaintext highlighter-rouge">individualid</code></li>
  <li><code class="language-plaintext highlighter-rouge">parentalid</code></li>
  <li><code class="language-plaintext highlighter-rouge">maternalid</code></li>
  <li><code class="language-plaintext highlighter-rouge">sex</code>	{1:male; 2:female, 0:unknown}</li>
  <li><code class="language-plaintext highlighter-rouge">phenotype</code>		{1: unaffected, 2: affected, -9:missing}</li>
</ul>

<p>as well as a single header line with the exact values above.</p>

<p>NOTE: if you wish to simply convert vcf to a tab-separated file, simply provide a pedigree file with only a single <code class="language-plaintext highlighter-rouge">familyid</code> and <code class="language-plaintext highlighter-rouge">phenotype</code></p>

<p>2) Variant call data in vcf format (compressed with gzip/bgzip or uncompressed)</p>

<h2 id="hail">Hail</h2>

<p>The “seganalysis” Python module is developed on top of <a href="https://hail.is/">Hail</a>. Hail is a Python module built on the top of Apache Spark and serves as an open-source, scalable framework for genomic data manipulation and analysis. The seganalysis module was tested on <a href="https://spark.apache.org/downloads.html">Spark-3.1.2, Pre-build for Apache Hadoop3.2</a>.</p>

<h2 id="steps-of-running-pipeline">Steps of running pipeline</h2>
<p>The following steps show how to run the segregation pipeline.</p>

<h4 id="step-1-run-spark">Step 1: Run Spark</h4>
<p>First activate Spark on your system</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>export SPARK_HOME=$HOME/spark-3.1.2-bin-hadoop3.2
export SPARK_LOG_DIR=$HOME/temp
module load java/11.0.2
cd ${SPARK_HOME}; ./sbin/start-master.sh
</code></pre></div></div>

<h4 id="step-2-generate-annotated-file">Step 2: Generate annotated file</h4>
<p>Run <a href="https://useast.ensembl.org/info/docs/tools/vep/script/vep_tutorial.html">VEP</a> to generate the annotated file.</p>

<h4 id="step-3--create-hail-matrixtable">Step 3:  Create hail matrixTable</h4>
<p>Next, initialize hail and import your vcf file and write it as a matrix table, a data structure optimized to efficiently store and manipulate genomic data. In the code snippet below, we import a vcf file and write it as a <code class="language-plaintext highlighter-rouge">MatrixTable</code> file, then read the newly-created file into a MatrixTable object. The test data used below is available here: [https://github.com/The-Neuro-Bioinformatics-Core/seganalysis/test].</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import sys
import pandas as pd 
import hail as hl
hl.import_vcf('./test/data/testseg.VEP.vcf',force=True,reference_genome='GRCh38',array_elements_required=False).write('./test/output/testseg.mt', overwrite=True)
mt = hl.read_matrix_table('./test/output/testseg.mt')
</code></pre></div></div>

<h4 id="step-4-run-the-seganalysis-module">Step 4: Run the seganalysis module</h4>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>from seganalysis import seg
ped = pd.read_csv('./test/data/testseg.ped', sep='\t')
destfolder = './test/output'
vcffile = './test/data/testseg.VEP.vcf'
seg.segrun(mt, ped, destfolder, hl, vcffile)    
</code></pre></div></div>
<p>This will generate two files: <code class="language-plaintext highlighter-rouge">header.txt</code> and <code class="language-plaintext highlighter-rouge">finalseg.csv</code>, in the  <code class="language-plaintext highlighter-rouge">destfolder</code>. <code class="language-plaintext highlighter-rouge">header.txt</code> includes the header of information in <code class="language-plaintext highlighter-rouge">finalseg.csv</code>. Columns of <code class="language-plaintext highlighter-rouge">finalseg.csv</code> are organized into the following sections:  1) locus and alleles, 2) CSQ, 3) Global- Non-Affected 4) Global-Affected,  5) Family, 6) Family-Affected 7) Family - Non-affected.</p>

<h5 id="locus-and-alleles">locus and alleles</h5>
<p>locus: chromosome and position <br />
alleles:  REF allele and ALT allele(s)</p>
<h5 id="csq">CSQ</h5>
<p>VEP places all annotations within the “CSQ” vcf INFO field. Running <code class="language-plaintext highlighter-rouge">seg.segrun()</code> will split CSQ into tab-separated columns.</p>
<h5 id="global---non-affected">Global - Non-Affected</h5>
<p>glb_naf_wild:  Global - Non-Affecteds, wildtype<br />
glb_naf_ncl:     Global - Non-Affecteds, no call  <br /> <br />
glb_naf_vrt:     Global - Non-Affecteds, with variant    <br />
glb_naf_homv:    Global - Non-Affecteds, homozygous for ALT allele<br />
glb_naf_altaf:   Global - Non-Affecteds, ALT allele frequency   <br /></p>
<h5 id="global---affected">Global - Affected</h5>
<p>glb_aff_wild: Global - Affecteds, wildtype <br />
glb_aff_ncl:     Global - Affecteds, no call    <br /> 
glb_aff_vrt:     Global - Affecteds, with variant  <br />
glb_aff_homv:    Global - Affecteds, homozygous for ALT allele<br />
glb_aff_altaf:   Global - Affecteds, ALT allele frequency   <br /></p>
<h5 id="family">Family</h5>
<p>{famid}_wild: Family - all: wildtype <br />
{famid}_ncl: Family - all: no call<br />
{famid}_vrt: Family - all: with variant<br />
{famid}_homv: Family - all: homozygous for ALT allele<br /></p>
<h5 id="family---affected">Family - Affected</h5>
<p>{famid}_wild_aff: Family - Affecteds: wildtype <br />
{famid}_ncl_aff: Family - Affecteds: no call<br />
{famid}_vrt_aff: Family - Affecteds: with variant<br />
{famid}_homv_aff: Family - Affecteds: homozygous for ALT allele<br /></p>
<h5 id="family---nonaffected">Family - Nonaffected</h5>
<p>{famid}_wild_naf: Family - Nonaffecteds: wildtype <br />
{famid}_ncl_naf: Family - Nonaffecteds: no call<br />
{famid}_vrt_naf: Family - Nonaffecteds: with variant<br />
{famid}_homv_naf: Family - Nonaffecteds: homozygous for ALT allele<br /></p>

<h4 id="step-5-optional-cleanup-and-parsing">Step 5 (optional): Cleanup and parsing</h4>
<p><code class="language-plaintext highlighter-rouge">finalseg.csv</code> can be cleaned up into a more excel-friendly format, better-suited to use excel column filters. Additionally, unwanted output columns can be removed by subsetting the <code class="language-plaintext highlighter-rouge">header.txt</code> file into a new file containing only the desired output columns (<code class="language-plaintext highlighter-rouge">header_need.txt</code> in the code snippet below). To clean without removing columns, simply use the original <code class="language-plaintext highlighter-rouge">header.txt</code> file instead.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>from seganalysis import parser
header_need = './test/data/header_need.txt'
parser.sub_seg(destfolder, header_need)  
</code></pre></div></div>
<p>The final output of this step is the file <code class="language-plaintext highlighter-rouge">finalseg_modified.csv</code></p>

<h4 id="step-6--shut-down-spark">Step 6  Shut down spark</h4>
<p>Do not forget to deactivate environment and stop spark:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cd ${SPARK_HOME}; ./sbin/stop-master.sh
</code></pre></div></div>

<h2 id="bibliography">Bibliography:</h2>
<ol>
  <li><a href="https://hail.is/references.html">Hail-Powered Science. An incomplete list of scientific work enabled by Hail</a>.</li>
</ol>
:ET